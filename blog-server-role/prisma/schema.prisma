generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DISABLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id                         String          @id @default(uuid())
  email                      String          @unique
  email_verified             Boolean         @default(false)
  email_verification_expires DateTime? //24h
  email_verification_token   String?         @unique
  password                   String?
  password_reset_token       String?         @unique
  password_reset_expires     DateTime? //4h
  role                       UserRole[]
  status                     UserStatus      @default(ACTIVE)
  reActive_token             String?         @unique
  reActive_expires           DateTime? //4h
  username                   String
  gender                     Gender?
  picture                    String?
  phone_number               String?
  created_at                 DateTime        @default(now())
  updated_at                 DateTime        @updatedAt
  oauth_provider             OauthProvider[]
  mfa                        MFA[]
  Plan                       Plan[]
  PlanMember                 PlanMember[]
  Role                       Role[]
}

model OauthProvider {
  provider_id String
  provider    String
  user_id     String
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@id([user_id, provider])
  @@unique([provider, provider_id])
}

model MFA {
  secret_key        String
  last_access       DateTime
  backup_code       String[]
  backup_codes_used String[] @default([])
  user_id           String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id])
  @@index([backup_code, backup_codes_used])
}

model UserRole {
  user_id String
  role_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role    Role   @relation(fields: [role_id], references: [role_id], onDelete: Cascade)

  @@id([user_id, role_id])
}

model Role {
  role_id    String     @id @default(uuid())
  role_name  String
  read_only  Boolean    @default(false)
  permission String[]
  user_role  UserRole[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  userId     String?
}

// model Plan {
//   id               String       @id @default(uuid())
//   plan_name        String
//   plan_description String
//   create_by_id     String
//   create_by        User         @relation(fields: [create_by_id], references: [id], onDelete: Cascade)
//   member           PlanMember[]
//   start_date       DateTime
//   due_date         DateTime
//   create_at        DateTime     @default(now())
//   update_at        DateTime     @updatedAt
// }

// model PlanMember {
//   user_id String
//   plan_id String
//   user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
//   plan    Plan   @relation(fields: [plan_id], references: [id], onDelete: Cascade)

//   @@id([user_id, plan_id])
// }

// model PlanRole {
//   id              String   @id @default(uuid())
//   plan_id         String
//   plan_role_name  String
//   plan_permission String[]
//   create_at       DateTime @default(now())
//   update_at       DateTime @updatedAt
// }
