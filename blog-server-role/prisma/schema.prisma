generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DISABLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Users {
  id                         String           @id @default(uuid())
  email                      String           @unique
  email_verified             Boolean          @default(false)
  email_verification_expires DateTime? //24h
  email_verification_token   String?          @unique
  password                   String?
  password_reset_token       String?          @unique
  password_reset_expires     DateTime? //4h
  roles                      UsersRoles[]
  status                     UserStatus       @default(ACTIVE)
  reActive_token             String?          @unique
  reActive_expires           DateTime? //4h
  username                   String
  gender                     Gender?
  picture                    String?
  phone_number               String?
  created_at                 DateTime         @default(now())
  updated_at                 DateTime         @updatedAt
  oauth_provider             OauthProviders[]
  mfa                        MFA[]
  plans                      Plans[]
  planMember                 PlanMembers[]
}

model OauthProviders {
  provider_id String
  provider    String
  user_id     String
  user        Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@id([user_id, provider])
  @@unique([provider, provider_id])
}

model MFA {
  secret_key        String
  last_access       DateTime
  backup_code       String[]
  backup_codes_used String[] @default([])
  user_id           String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id])
  @@index([backup_code, backup_codes_used])
}

model UsersRoles {
  user_id String
  role_id String
  user    Users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role    Roles  @relation(fields: [role_id], references: [role_id], onDelete: Cascade)

  @@id([user_id, role_id])
}

model Roles {
  role_id    String       @id @default(uuid())
  role_name  String
  read_only  Boolean      @default(false)
  permission String[]
  user_role  UsersRoles[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  userId     String?
}

model Plans {
  id               String        @id @default(uuid())
  plan_name        String
  plan_description String
  create_by_id     String
  create_by        Users         @relation(fields: [create_by_id], references: [id], onDelete: Cascade)
  members          PlanMembers[]
  start_date       DateTime
  due_date         DateTime
  create_at        DateTime      @default(now())
  update_at        DateTime      @updatedAt
  plan_roles       PlanRoles[]
}

model PlanMembers {
  user_id      String
  plan_id      String
  plan_role_id String
  plan_role    PlanRoles @relation(fields: [plan_role_id], references: [id], onDelete: Cascade)
  user         Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan         Plans     @relation(fields: [plan_id], references: [id], onDelete: Cascade)

  @@id([plan_id, user_id, plan_role_id])
}

model PlanRoles {
  id              String        @id @default(uuid())
  plan_id         String
  plan            Plans         @relation(fields: [plan_id], references: [id], onDelete: Cascade)
  plan_role_name  String
  plan_permission String[]
  create_at       DateTime      @default(now())
  update_at       DateTime      @updatedAt
  PlanMembers     PlanMembers[]
}
